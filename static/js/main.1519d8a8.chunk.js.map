{"version":3,"sources":["components/Editor.js","components/Mgs.js","App.js","serviceWorker.js","index.js"],"names":["queryString","require","Editor","useState","query","parse","window","location","search","name","state","setState","span","style","padding","title","actions","AlertTwoTone","key","onClick","pathname","href","stringify","size","value","placeholder","onChange","e","target","Mgs","setTimeout","anime","timeline","loop","add","targets","scale","opacity","easing","duration","delay","el","i","textAlign","className","getName","App","page","Object","keys","length","ghost","background","backIcon","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kXAMMA,EAAcC,EAAQ,IAuCbC,MArCf,WAAmB,IAAD,EACUC,mBAAS,CACjCC,MAAOJ,EAAYK,MAAMC,OAAOC,SAASC,QACzCC,KAAM,OAHQ,mBACTC,EADS,KACFC,EADE,KAgBhB,OACE,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,KAAM,GAAIC,MAAO,CAAEC,QAAS,cAC/B,kBAAC,IAAD,CACEC,MAAM,gFACNC,QAAS,CAAC,kBAACC,EAAA,EAAD,CAAcC,IAAI,UAAUC,QAZ/B,WAAO,IACdC,EAAad,OAAOC,SAApBa,SACAX,EAASC,EAATD,KACRH,OAAOC,SAASc,KAAO,UAAGD,EAAH,KAAiBpB,EAAYsB,UAAU,CAAEb,cAWxD,kBAAC,IAAD,CACEc,KAAK,QACLC,MAAOd,EAAMD,KACbgB,YAAY,qBACZC,SAtBO,SAACC,GAClBhB,EAAS,eAAKD,EAAN,CAAaD,KAAMkB,EAAEC,OAAOJ,iB,kBCXlCxB,EAAcC,EAAQ,IAEb,SAAS4B,IAAO,IAAD,EACZ1B,mBAAS,CACvBC,MAAOJ,EAAYK,MAAMC,OAAOC,SAASC,UADpCE,EADqB,oBAI5BoB,YAAW,WACTC,IACGC,SAAS,CAAEC,MAAM,IACjBC,IAAI,CACHC,QAAS,cACTC,MAAO,CAAC,GAAI,GACZC,QAAS,CAAC,EAAG,GACbC,OAAQ,cACRC,SAAU,IACVC,MAAO,SAACC,EAAIC,GAAL,OAAW,IAAMA,KAEzBR,IAAI,CACHC,QAAS,QACTE,QAAS,EACTE,SAAU,IACVD,OAAQ,cACRE,MAAO,QAEV,GAIH,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK5B,KAAM,GAAIC,MAAO,CAAEC,QAAS,YAAa6B,UAAW,WACvD,wBAAIC,UAAU,QACZ,0BAAMA,UAAU,QAAhB,yEACA,0BAAMA,UAAU,QAAhB,4BACA,0BAAMA,UAAU,QAAhB,gBACA,0BAAMA,UAAU,QAVR,WAAO,IAAD,EACpB,iBAAOlC,EAAMN,aAAb,aAAO,EAAaK,KASUoC,OCnClC,IAAM7C,EAAcC,EAAQ,IA4Bb6C,MA1Bf,WAAgB,IAMVC,EANS,EACG5C,mBAAS,CACvBC,MAAOJ,EAAYK,MAAMC,OAAOC,SAASC,UADpCE,EADM,oBAYb,OAJEqC,EAJkBC,OAAOC,KAAKvC,EAAMN,OAAO8C,OAAS,EAI7C,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAGP,iCACE,kBAAC,IAAD,CACEC,MAAM,OACNtC,MAAO,CAAEuC,WAAY,WACrBC,SAAS,QACTtC,MAAM,mHAGPgC,ICfaO,QACW,cAA7BhD,OAAOC,SAASgD,UAEe,UAA7BjD,OAAOC,SAASgD,UAEhBjD,OAAOC,SAASgD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1519d8a8.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './Editor.css'\nimport { Row, Col } from 'antd'\nimport { Card } from 'antd'\nimport { Input } from 'antd'\nimport { AlertTwoTone } from '@ant-design/icons'\nconst queryString = require('query-string')\n\nfunction Editor() {\n  const [state, setState] = useState({\n    query: queryString.parse(window.location.search),\n    name: null\n  })\n\n  const nameChange = (e) => {\n    setState({ ...state, name: e.target.value })\n  }\n\n  const navigate = () => {\n    const { pathname } = window.location\n    const { name } = state\n    window.location.href = `${pathname}?` + queryString.stringify({ name })\n  }\n\n  return (\n    <main>\n      <Row>\n        <Col span={24} style={{ padding: '50px 50px' }}>\n          <Card\n            title=\"Ø§ÙƒØªØ¨Ù€ \\ ÙŠÙ€ Ø§Ù„Ø§Ø³Ù…\"\n            actions={[<AlertTwoTone key=\"setting\" onClick={navigate} />]}\n          >\n            <Input\n              size=\"large\"\n              value={state.name}\n              placeholder=\"Ø§Ø³Ù…\"\n              onChange={nameChange}\n            />\n          </Card>\n        </Col>\n      </Row>\n    </main>\n  )\n}\n\nexport default Editor\n","import React, { useState } from 'react'\nimport './Mgs.css'\nimport { Row, Col } from 'antd'\nimport anime from 'animejs/lib/anime.es.js'\nconst queryString = require('query-string')\n\nexport default function Mgs() {\n  const [state] = useState({\n    query: queryString.parse(window.location.search)\n  })\n  setTimeout(() => {\n    anime\n      .timeline({ loop: true })\n      .add({\n        targets: '.ml15 .word',\n        scale: [14, 1],\n        opacity: [0, 1],\n        easing: 'easeOutCirc',\n        duration: 800,\n        delay: (el, i) => 800 * i\n      })\n      .add({\n        targets: '.ml15',\n        opacity: 0,\n        duration: 1000,\n        easing: 'easeOutExpo',\n        delay: 1000\n      })\n  }, 0)\n  const getName = () => {\n    return state.query?.name\n  }\n  return (\n    <Row>\n      <Col span={24} style={{ padding: '50px 50px', textAlign: 'center' }}>\n        <h1 className=\"ml15\">\n          <span className=\"word\">ØªÙ„Ø­Ø³ Ø§Ùˆ ØªÙ„Ø­Ø³ÙŠ </span>\n          <span className=\"word\">Ø·ÙŠØ²ÙŠ</span>\n          <span className=\"word\">ÙŠØ§</span>\n          <span className=\"word\">{getName()}</span>\n        </h1>\n      </Col>\n    </Row>\n  )\n}\n","import React, { useState } from 'react'\nimport { PageHeader } from 'antd'\nimport Editor from './components/Editor'\nimport Mgs from './components/Mgs'\nconst queryString = require('query-string')\n\nfunction App() {\n  const [state] = useState({\n    query: queryString.parse(window.location.search)\n  })\n  const weHaveQuery = Object.keys(state.query).length > 0\n\n  let page\n  if (weHaveQuery) {\n    page = <Mgs />\n  } else {\n    page = <Editor />\n  }\n  return (\n    <section>\n      <PageHeader\n        ghost=\"true\"\n        style={{ background: '#0F0F0F' }}\n        backIcon=\"false\"\n        title=\"ðŸ’“ØªØ­Ù„Ø³Ù€ Ø·ÙŠØ²ÙŠ ÙƒØ®Ø¯Ù…Ø©ðŸ’“\"\n        // subTitle=\"This is a subtitle\"\n      />\n      {page}\n    </section>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}